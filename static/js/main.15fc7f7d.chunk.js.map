{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","readOnly","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","document","getElementById","deleteItem","duration","easing","library","add","faTrashAlt","faEdit","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVAyCeA,MAnCf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAEpB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BACIC,SAAW,OACXC,KAAK,OACLC,GAAIL,EAAKE,IACTI,MAAON,EAAKO,KACZC,SACI,SAACC,GACGb,EAAMc,UAAUD,EAAEE,OAAOL,MAAON,EAAKE,QAGjD,8BACI,kBAAC,IAAD,CAAiBD,UAAU,eAAeW,KAAK,OAC/CC,QAAU,kBAAMC,SAASC,eAAef,EAAKE,KAAKC,UAAW,KAC7D,kBAAC,IAAD,CAAiBF,UAAU,iBAAiBW,KAAK,YACjDC,QAAU,kBAAMjB,EAAMoB,WAAWhB,EAAKE,cAM1D,OACI,6BACI,kBAAC,IAAD,CAAUe,SAAU,IAAKC,OAAO,YAC3BrB,K,cC7BjBsB,IAAQC,IAAKC,IAAYC,K,IAoFTC,E,kDAjFd,WAAY3B,GAAO,IAAD,8BAChB,cAAMA,IACD4B,MAAQ,CACX1B,MAAM,GACN2B,YAAY,CACVlB,KAAK,GACLL,IAAI,KAGR,EAAKwB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKX,WAAa,EAAKA,WAAWW,KAAhB,gBAClB,EAAKjB,UAAY,EAAKA,UAAUiB,KAAf,gBAZD,E,wDAcRlB,GACVoB,KAAKC,SAAS,CACZL,YAAY,CACVlB,KAAME,EAAEE,OAAOL,MACfJ,IAAI6B,KAAKC,W,8BAIPvB,GACNA,EAAEwB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAC3B,GAAoB,KAAjBS,EAAQ3B,KAAY,CACrB,IAAMT,EAAK,sBAAO+B,KAAKL,MAAM1B,OAAlB,CAAyBoC,IACpCL,KAAKC,SAAS,CACZhC,MAAOA,EACP2B,YAAa,CACXlB,KAAM,GACNL,IAAK,S,iCAKFA,GACT,IAAMiC,EAAgBN,KAAKL,MAAM1B,MAAMsC,QAAO,SAAApC,GAAI,OAChDA,EAAKE,MAAQA,KACb2B,KAAKC,SAAS,CACZhC,MAAMqC,M,gCAGF5B,EAAML,GACd,IAAMJ,EAAQ+B,KAAKL,MAAM1B,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAQA,IACdF,EAAKO,KAAOA,MAGhBsB,KAAKC,SAAS,CACZhC,MAAOA,EACPK,UAAU,M,+BAIV,OACE,yBAAKF,UAAU,OAEb,4BAAQA,UAAU,gBACd,kBAAC,EAAD,CAAWH,MAAS+B,KAAKL,MAAM1B,MAC7BkB,WAAca,KAAKb,WACnBN,UAAamB,KAAKnB,aAIxB,0BAAML,GAAG,aAAagC,SAAUR,KAAKD,SACnC,2BAAOxB,KAAK,OAAOkC,YAAY,aAC7BhC,MAAOuB,KAAKL,MAAMC,YAAYlB,KAC9BC,SAAUqB,KAAKH,cAEjB,4BAAQtB,KAAK,UACX,4C,GAzEMmC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASC,eAAe,SDyHpB,kBAAmBkC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.15fc7f7d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport  FlipMove from 'react-flip-move';\r\n\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    const listItems = items.map(item =>\r\n        {\r\n            return <div className=\"list\" key={item.key}>\r\n                <p>\r\n                    <input \r\n                        readOnly = \"true\"\r\n                        type=\"text\" \r\n                        id={item.key} \r\n                        value={item.text}\r\n                        onChange ={\r\n                            (e) => {\r\n                                props.setUpdate(e.target.value, item.key)\r\n                            }\r\n                        }/>\r\n                    <span>\r\n                        <FontAwesomeIcon className=\"faicons edit\" icon=\"edit\"\r\n                        onClick={ () => document.getElementById(item.key).readOnly = false} />\r\n                        <FontAwesomeIcon className=\"faicons delete\" icon=\"trash-alt\"\r\n                        onClick={ () => props.deleteItem(item.key)} />\r\n                    </span>\r\n                </p>\r\n                \r\n            </div>\r\n        })\r\n    return(\r\n        <div>\r\n            <FlipMove duration={400} easing=\"ease-out\">\r\n                {listItems}\r\n            </FlipMove>\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems'\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrashAlt, faEdit } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add( faTrashAlt, faEdit );\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{\n        text:'',\n        key:'',\n      },\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\nhandleInput(e){\n  this.setState({\n    currentItem:{\n      text: e.target.value,\n      key:Date.now()\n    }\n  })\n}\naddItem(e){\n  e.preventDefault();\n  const newItem = this.state.currentItem;\n  if(newItem.text !== \"\"){\n    const items = [...this.state.items, newItem];\n    this.setState({\n      items: items,\n      currentItem: {\n        text: '',\n        key: '',\n      }\n    })\n  }\n}\ndeleteItem(key){\n  const filteredItems = this.state.items.filter(item =>\n    item.key !== key);\n    this.setState({\n      items:filteredItems\n    })\n}\nsetUpdate(text, key){\n  const items = this.state.items;\n  items.map(item =>{\n    if(item.key === key){\n      item.text = text;\n    }\n  })\n  this.setState({\n    items: items,\n    readOnly: false\n  })\n}\n  render () {\n    return (\n      <div className=\"App\">\n\n        <header className=\"holder-lists\">\n            <ListItems items = {this.state.items}\n              deleteItem = {this.deleteItem}\n              setUpdate = {this.setUpdate}>\n             </ListItems>\n        </header>\n\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"text\" placeholder=\"Enter Task\"\n            value={this.state.currentItem.text} \n            onChange={this.handleInput}\n          />\n          <button type=\"submit\">\n            <span>ADD</span>\n          </button>\n        </form>\n\n      </div>\n    );\n  }\n \n}\n export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}